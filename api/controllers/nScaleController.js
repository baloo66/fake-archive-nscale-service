"use strict";

exports.read_binary = function(req, res) {
    console.log('read_binary called with a dokid of [' + req.params.dokid + ']');
    if (req.params.dokid == '20') {
        res.status(200).json( { "dokId": "20",
                                "dokType": 1,
                                "archivDateTime": "2018-08-26T22:33:44.567Z",
                                "dokSize": 9428,
                                "status": 0,
                                "nscaleErrorMessage": null,
                                "binaryBase64Object": ""+
                                                      "xmUjMcJx9bCRHtoQmbZiFb6ET8y2tXo8jZc0yy2NMS64J4afi7lb6V1u7oqpn4uh9q49HbMYf63z6WPHUM26xlhxa0cstK6zMdYPgEyBaQD4dbNWVNM5ORmlZz8P9ngAnII78kwBqWcyTkSeFTbyTOLJSTQ5iT2Up4BAQZMeSqYU2gZDy55JRG+U61GkKDQ5md7zvwGesDz0CmVuZHN0cmVhbQplbmRvYmoKCjYgMCBvYmoKNzEwOAplbmRvYmoKCjcgMCBvYmoKPDwvVHlwZS9Gb250RGVzY3JpcHRvci9Gb250TmFtZS9CQUFBQUErTGliZXJhdGlvblNlcmlmCi9GbGFncyA0Ci9Gb250QkJveFstMTc2IC0zMDMgMTAwNSA5ODFdL0l0YWxpY0FuZ2xlIDAKL0FzY2VudCA4OTEKL0Rlc2NlbnQgLTIxNgovQ2FwSGVpZ2h0IDk4MQovU3RlbVYgODAKL0ZvbnRGaWxlMiA1IDAgUgo+PgplbmRvYmoKCjggMCBvYmoKPDwvTGVuZ3RoIDI5Ny9GaWx0ZXIvRmxhdGVEZWNvZGU+PgpzdHJlYW0KeJxdkU1vgzAMhu/5FTl2h4pAv1YJIbVQJA770Nh+ACSmizRCFNID/36x023SDokex+9rxXZSNlVjtE9e3SRb8HzQRjmYp5uTwHu4asPSjCst/T2iW46dZUnwtsvsYWzMMOU5S95CbvZu4auTmnp4YMmLU+C0ufLVR9mGuL1Z+wUjGM8FKwquYAh1njr73I2QkGvdqJDWflkHy5/gfbHAM4rT+BU5KZhtJ8F15gosF6LgeV0XDIz6l0v30dIP8rNzQZoGqRDbUxE4I96nyJvIFfI2coa8i3xE3hMftsgH4kwgPxLv6P0Y9TvkU9RvkM9RT/XL+AfSV1FfI18in5Hr6MU6qYjvF2rw3gm2irv4GSGXN+fC+GhhNDecmDbwu1M7WXTR+QYr6JDeCmVuZHN0cmVhbQplbmRvYmoKCjkgMCBvYmoKPDwvVHlwZS9Gb250L1N1YnR5cGUvVHJ1ZVR5cGUvQmFzZUZvbnQvQkFBQUFBK0xpYmVyYXRpb25TZXJpZgovRmlyc3RDaGFyIDAKL0xhc3RDaGFyIDE2Ci9XaWR0aHNbMzY1IDM4OSA0NDMgNzc3IDUwMCAyNzcgMjc3IDI1MCA2MTAgNDQzIDM4OSAzMzMgNzIyIDUwMCA1MDAgNTAwCjUwMCBdCi9Gb250RGVzY3JpcHRvciA3IDAgUgovVG9Vbmljb2RlIDggMCBSCj4+CmVuZG9iagoKMTAgMCBvYmoKPDwvRjEgOSAwIFIKPj4KZW5kb2JqCgoxMSAwIG9iago8PC9Gb250IDEwIDAgUgovUHJvY1NldFsvUERGL1RleHRdCj4+CmVuZG9iagoKMSAwIG9iago8PC9UeXBlL1BhZ2UvUGFyZW50IDQgMCBSL1Jlc291cmNlcyAxMSAwIFIvTWVkaWFCb3hbMCAwIDU5NS4yNzU1OTA1NTExODEgODQxLjg2MTQxNzMyMjgzNV0vR3JvdXA8PC9TL1RyYW5zcGFyZW5jeS9DUy9EZXZpY2VSR0IvSSB0cnVlPj4vQ29udGVudHMgMiAwIFI+PgplbmRvYmoKCjQgMCBvYmoKPDwvVHlwZS9QYWdlcwovUmVzb3VyY2VzIDExIDAgUgovTWVkaWFCb3hbIDAgMCA1OTUgODQxIF0KL0tpZHNbIDEgMCBSIF0KL0NvdW50IDE+PgplbmRvYmoKCjEyIDAgb2JqCjw8L1R5cGUvQ2F0YWxvZy9QYWdlcyA0IDAgUgovT3BlbkFjdGlvblsxIDAgUiAvWFlaIG51bGwgbnVsbCAwXQovTGFuZyhkZS1ERSkKPj4KZW5kb2JqCgoxMyAwIG9iago8PC9BdXRob3I8RkVGRjAwNDEwMDZDMDA2NTAwNzgwMDYxMDA2RTAwNjQwMDY1MDA3MjAwMjAwMDQ1MDA2QzAwNkMwMDY1MDA3Mj4KL0NyZWF0b3I8RkVGRjAwNTcwMDcyMDA2OTAwNzQwMDY1MDA3Mj4KL1Byb2R1Y2VyPEZFRkYwMDRDMDA2OTAwNjIwMDcyMDA2NTAwNEYwMDY2MDA2NjAwNjkwMDYzMDA2NTAwMjAwMDM2MDAyRTAwMzA+Ci9DcmVhdGlvbkRhdGUoRDoyMDE4MDgyNjE5NTUwMyswMicwMCcpPj4KZW5kb2JqCgp4cmVmCjAgMTQKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDA4MzMxIDAwMDAwIG4gCjAwMDAwMDAwMTkgMDAwMDAgbiAKMDAwMDAwMDIyNSAwMDAwMCBuIAowMDAwMDA4NTAwIDAwMDAwIG4gCjAwMDAwMDAyNDUgMDAwMDAgbiAKMDAwMDAwNzQzOCAwMDAwMCBuIAowMDAwMDA3NDU5IDAwMDAwIG4gCjAwMDAwMDc2NTQgMDAwMDAgbiAKMDAwMDAwODAyMCAwMDAwMCBuIAowMDAwMDA4MjQ0IDAwMDAwIG4gCjAwMDAwMDgyNzYgMDAwMDAgbiAKMDAwMDAwODU5OSAwMDAwMCBuIAowMDAwMDA4Njk2IDAwMDAwIG4gCnRyYWlsZXIKPDwvU2l6ZSAxNC9Sb290IDEyIDAgUgovSW5mbyAxMyAwIFIKL0lEIFsgPDAxQjAzM0VBQjkzNTBDNDhEMzdDQTBGMUE1QjhEQzM2Pgo8MDFCMDMzRUFCOTM1MEM0OEQzN0NBMEYxQTVCOERDMzY+IF0KL0RvY0NoZWNrc3VtIC84NkY3NEMxMzc4NTM5QjkxOTJENEU1MkU0REU3MERGQQo+PgpzdGFydHhyZWYKODk0NQolJUVPRgo="
                              });
    } else if (req.params.dokid == '99001') { // nScale OFFLINE
        res.status(503).json( { "status": 1, "nscaleErrorMessage": null });
    } else if (req.params.dokid == '99002') { // nScale TIMEOUT
        res.status(408).json( { "status": 2, "nscaleErrorMessage": null });
    } else if (req.params.dokid == '99003') { // nScale DOC_NOT_EXIST
        res.status(404).json( { "status": 3, "nscaleErrorMessage": null });
    } else if (req.params.dokid == '99004') { // nScale DOC_DELETED
        res.status(404).json( { "status": 4, "nscaleErrorMessage": null });
    } else if (req.params.dokid == '99005') { // nScale ERROR
        res.status(500).json( { "status": 5, "nscaleErrorMessage": null });
    } else if (req.params.dokid == '99408') {
        res.status(408).json( { "status": 408, "nscaleErrorMessage": null });
    } else if (req.params.dokid == '99500') {
        res.status(500).json( { "status": 500, "nscaleErrorMessage": null });
    } else if (req.params.dokid == '99503') {
        res.status(503).json( { "status": 503, "nscaleErrorMessage": null });
    } else {
        res.status(404).json( { "dokId": req.params.dokid,
                                "dokType": 0,
                                "archivDateTime": null,
                                "dokSize": 0,
                                "status": 0,
                                "nscaleErrorMessage": "can't find document",
                                "binaryBase64Object": null
                              });
    }
};


exports.write_binary = function(req, res) {
    console.log('write_binary called');
};
